"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    userslist(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Find a user by their unique identifier."
    userById(id:ID! @eq):User! @find
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Mutation {
  "Create a new user."
  createUser(input: CreateUserInput @spread): User @create

  "Update an existing user."
  updateUser(id: ID!, input:UpdateUserInput @spread): User @update

  "Delete a user by their ID."
  deleteUser(id: ID! @eq): User @delete
}

input CreateUserInput{
    "User's name."
    name: String!

    "User's email address."
    email: String! @rules(apply:["email","unique:users,email"])

    "User's password."
    password:String! @hash @rules(apply:["Min:5"])
}

input UpdateUserInput{
    "User's name."
    name: String!

    "User's password."
    password:String! @hash @rules(apply:["Min:5"])
}


